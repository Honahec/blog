import{_ as i,c as a,a3 as t,o as e}from"./chunks/framework.ohJJpums.js";const E=JSON.parse('{"title":"JWT（JSON Web Token）教程","description":"","frontmatter":{"permalink":"/blog/npzmqdqk/"},"headers":[],"relativePath":"blog/npzmqdqk/index.md","filePath":"blog/JWT.md","lastUpdated":1760074091000}'),n={name:"blog/npzmqdqk/index.md"};function l(h,s,p,k,r,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="jwt-json-web-token-教程" tabindex="-1">JWT（JSON Web Token）教程 <a class="header-anchor" href="#jwt-json-web-token-教程" aria-label="Permalink to &quot;JWT（JSON Web Token）教程&quot;">​</a></h1><blockquote><p>JSON Web Token (JWT) is a compact URL-safe means of representing claims to be transferred between two parties.</p></blockquote><h2 id="背景-我们为什么需要-jwt" tabindex="-1">背景：我们为什么需要 JWT？ <a class="header-anchor" href="#背景-我们为什么需要-jwt" aria-label="Permalink to &quot;背景：我们为什么需要 JWT？&quot;">​</a></h2><p>先从认证（Authentication）/授权（Authorization）谈起，讲讲 JWT 解决了什么</p><h3 id="传统的-session-cookie-模式" tabindex="-1">传统的 Session + Cookie 模式 <a class="header-anchor" href="#传统的-session-cookie-模式" aria-label="Permalink to &quot;传统的 Session + Cookie 模式&quot;">​</a></h3><p>在传统 Web 应用架构（特别是服务端渲染 + 后端管理会话的模式）中，一个常见流程是：</p><ol><li>用户提交用户名 + 密码给服务器；</li><li>服务器验证成功后，在服务器端生成一个 Session（如存入内存、Redis、数据库等），并给客户端返回一个 session id；</li><li>客户端浏览器以 Cookie 的方式保存 session id，并在后续每个请求里自动带上；</li><li>服务器根据这个 session id 查到对应的用户信息，就知道这是哪个登录用户，从而进行权限判断、返回数据等。</li></ol><p>这种方式的问题或局限包括：</p><ul><li><strong>状态性（Stateful）</strong>：服务器必须维护一个 session 存储。</li><li><strong>扩展性问题</strong>：如果你有多台后端服务器，session 必须共享。</li><li><strong>适配性</strong>：Cookie 在跨域、子域、移动端 API 调用里比较麻烦。</li><li><strong>性能</strong>：每次请求都要查 session 存储，造成 I/O 开销。</li></ul><p>随着越来越多的应用架构向 <strong>前后端分离</strong>、<strong>多域名服务</strong> 等发展，传统 session 模式的缺点就越来越明显。</p><p>于是应运而生一种“无状态（stateless）”的认证方式 —— <strong>Token 机制</strong>，而 JWT 是目前被广泛采用的一种标准格式的 token。</p><h3 id="token-jwt-的优点-为什么要用-jwt" tabindex="-1">Token / JWT 的优点（为什么要用 JWT） <a class="header-anchor" href="#token-jwt-的优点-为什么要用-jwt" aria-label="Permalink to &quot;Token / JWT 的优点（为什么要用 JWT）&quot;">​</a></h3><p>JWT 作为一种常见的 token 机制，带来了以下好处：</p><ul><li><p><strong>无状态 / 自包含（Stateless &amp; Self-contained）</strong></p><p>JWT 本身就包含必要的信息（如用户 ID、权限、过期时间等），服务器验证时只需校验签名即可，不必查数据库/会话存储（当然某些场景仍会查），减少了服务器的状态管理压力。</p></li><li><p><strong>跨域 / 跨服务 / 多端一致性</strong></p><p>因为 JWT 是标准字符串（通常通过 HTTP Header 带上），你可以很方便地在不同服务、不同子域、移动端使用。</p></li><li><p><strong>灵活承载用户信息</strong></p><p>在 token 的 payload 部分，你可以放一些附加声明（claims），如用户角色、权限、用户名、用户 ID 等。这样下游服务可以根据 token 里的信息快速做权限判断，无需额外查库。</p></li><li><p><strong>性能提升</strong></p><p>减少因为查 session、查数据库带来的 I/O 开销。</p></li><li><p><strong>标准化 &amp; 生态丰富</strong></p><p>JWT 是一个开标准（RFC 7519），有很多成熟的库支持各种语言和中间件。</p></li></ul><h2 id="jwt-是什么" tabindex="-1">JWT 是什么？ <a class="header-anchor" href="#jwt-是什么" aria-label="Permalink to &quot;JWT 是什么？&quot;">​</a></h2><h3 id="基本定义" tabindex="-1">基本定义 <a class="header-anchor" href="#基本定义" aria-label="Permalink to &quot;基本定义&quot;">​</a></h3><p>JWT 即 <strong>JSON Web Token</strong>，是一个使用 JSON 表示声明（claims），并带有签名的令牌，用于在各方之间安全地传递信息。它可以用于认证、授权、信息交换（claim 传递）等场景。</p><p>其由三部分组成</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] . [ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] . [ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span></code></pre></div><p>三部分都是经过 Base64Url 编码（而不是标准 Base64），然后用点 “.” 连接起来。</p><h4 id="header" tabindex="-1">Header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;Header&quot;">​</a></h4><p>Header 通常包含两个关键字段：</p><ul><li><strong>alg</strong>：指定签名算法，例如 HS256（HMAC + SHA256）、RS256（RSA + SHA256）等</li><li><strong>typ</strong>：通常设置为 “JWT”</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后 Base64Url 编码，就变成 header 部分。</p><h4 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;payload&quot;">​</a></h4><p>Payload 部分包含“声明（claims）”，即一些要传递的信息／断言。比如用户 ID、用户名、角色、token 颁发时间、过期时间等。</p><p>标准（注册）声明有一些保留字段，包括但不限于：</p><table tabindex="0"><thead><tr><th>Claim 名称</th><th>含义</th></tr></thead><tbody><tr><td>iss</td><td>发行者（issuer）</td></tr><tr><td>sub</td><td>主题 / 面向的主体（通常是用户 ID）</td></tr><tr><td>aud</td><td>接收方（受众）</td></tr><tr><td>exp</td><td>过期时间（Expiration Time）</td></tr><tr><td>nbf</td><td>在此时间之前不可用（Not Before）</td></tr><tr><td>iat</td><td>颁发时间（Issued At）</td></tr><tr><td>jti</td><td>JWT 唯一标识 ID</td></tr></tbody></table><p>除此之外，还可以添加自定义的声明字段。但不要放太敏感的信息（如密码），因为 JWT 虽然签名了，但 payload 是可读的。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;114514&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Joker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;joker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1630000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1630003600</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="signature" tabindex="-1">Signature <a class="header-anchor" href="#signature" aria-label="Permalink to &quot;Signature&quot;">​</a></h4><p>签名部分的作用是保证 <strong>token 的完整性与真实性</strong>。也就是说，接收方可以校验这个 token 是不是被篡改过、确实是由发行方签发的。</p><p>签名的计算方法通常如下（以 HS256 为例）：</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signature = HMAC_SHA256(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    secret_key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>对于使用 RSA / ECDSA 的算法，则是用私钥生成签名，公钥验证。这样签名者和验证者可以区分角色。</p><p>最终完整的 token 形式就是这样的字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HEADER_BASE64.PAYLOAD_BASE64.SIGNATURE_BASE64</span></span></code></pre></div><p>客户端接收到这个完整字符串后，在后续请求中带上，服务端就可以按同样方式验证签名，并确认 payload 是否被修改。</p><h2 id="jwt-的工作流程" tabindex="-1">JWT 的工作流程 <a class="header-anchor" href="#jwt-的工作流程" aria-label="Permalink to &quot;JWT 的工作流程&quot;">​</a></h2><p>下面用一个“前端 + 后端 API”的例子来说明 JWT 在实际中的流程。</p><h3 id="典型流程" tabindex="-1">典型流程 <a class="header-anchor" href="#典型流程" aria-label="Permalink to &quot;典型流程&quot;">​</a></h3><h4 id="登录-认证-authentication" tabindex="-1">登录 / 认证 （Authentication） <a class="header-anchor" href="#登录-认证-authentication" aria-label="Permalink to &quot;登录 / 认证 （Authentication）&quot;">​</a></h4><ul><li>前端用户填写用户名 / 密码，提交给后端 login 接口。</li><li>后端验证用户名 / 密码。如果认证成功，那么后端生成一个 JWT，包含用户 ID、角色、过期时间等信息。</li><li>后端把这个 JWT 返回给前端。</li></ul><h4 id="前端保存-token" tabindex="-1">前端保存 token <a class="header-anchor" href="#前端保存-token" aria-label="Permalink to &quot;前端保存 token&quot;">​</a></h4><ul><li>前端收到 JWT 后，一般存储在合适的位置（如 Http Only Cookie）</li></ul><h4 id="请求受保护接口时带上-token" tabindex="-1">请求受保护接口时带上 token <a class="header-anchor" href="#请求受保护接口时带上-token" aria-label="Permalink to &quot;请求受保护接口时带上 token&quot;">​</a></h4><ul><li>前端在每次调用后端受保护 API 时，在 HTTP 请求头里添加 <code>Authorization: Bearer &lt;token&gt;</code>。</li><li>后端收到请求，将 Authorization 头里的 token 取出来，做验证。</li></ul><h4 id="服务端验证-token" tabindex="-1">服务端验证 token <a class="header-anchor" href="#服务端验证-token" aria-label="Permalink to &quot;服务端验证 token&quot;">​</a></h4><ul><li>后端使用事先保存的 secret（对于 HMAC）或公钥（对于 RSA/ECDSA）对 token 的签名进行校验。</li><li>如果签名不正确、token 过期、被篡改、不可用等，都拒绝访问。</li><li>如果验证通过，解析 payload 得到用户身份信息（如用户 ID、角色等），然后可以继续做权限判断、返回数据等。</li></ul><h4 id="刷新-续期" tabindex="-1">刷新 / 续期 <a class="header-anchor" href="#刷新-续期" aria-label="Permalink to &quot;刷新 / 续期&quot;">​</a></h4><ul><li>通常 JWT 会带 <code>exp</code>（过期时间），过期后就不能再用。</li><li>为了用户体验，通常还会设计一个 refresh token 的机制：短期有效的 access token + 长期有效的 refresh token。前端可以通过 refresh token 来获取新的 access token。</li><li>这样可以缩短 access token 的有效期，降低被盗风险；同时又不强迫用户频繁登录。</li></ul><h4 id="维护黑名单" tabindex="-1">维护黑名单 <a class="header-anchor" href="#维护黑名单" aria-label="Permalink to &quot;维护黑名单&quot;">​</a></h4><ul><li>在用户登出时，为防止原本 token 继续被使用，通常会将原本的 token 拉入黑名单</li></ul><h2 id="实际示例" tabindex="-1">实际示例 <a class="header-anchor" href="#实际示例" aria-label="Permalink to &quot;实际示例&quot;">​</a></h2><p>以下为 Django REST framework 中使用 JWT 的示例</p><p>安装库</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> djangorestframework-simplejwt</span></span></code></pre></div><p>在鉴权 view 中导入相关方法</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework_simplejwt.tokens </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RefreshToken</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework_simplejwt.exceptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TokenError</span></span></code></pre></div><p>用户登陆时生成 JWT Token</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refresh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RefreshToken.for_user(user)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(refresh.access_token),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;refresh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(refresh),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>用户登出时维护黑名单</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refresh_token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.data.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;refresh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refresh_token:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RefreshToken(refresh_token)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    token.blacklist()</span></span></code></pre></div><p>Refresh token</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    refresh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RefreshToken(refresh_token)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    access_token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refresh.access_token</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(access_token),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;refresh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(refresh),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TokenError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">验证 Token 有效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid token&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,66)]))}const g=i(n,[["render",l]]);export{E as __pageData,g as default};
