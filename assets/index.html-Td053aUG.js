import{a as i,c as a,b as e,o as n}from"./app-gy_JSSK_.js";const t={};function h(l,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<blockquote><p>JSON Web Token (JWT) is a compact URL-safe means of representing claims to be transferred between two parties.</p></blockquote><h2 id="背景-我们为什么需要-jwt" tabindex="-1"><a class="header-anchor" href="#背景-我们为什么需要-jwt"><span>背景：我们为什么需要 JWT？</span></a></h2><p>先从认证（Authentication）/授权（Authorization）谈起，讲讲 JWT 解决了什么</p><h3 id="传统的-session-cookie-模式" tabindex="-1"><a class="header-anchor" href="#传统的-session-cookie-模式"><span>传统的 Session + Cookie 模式</span></a></h3><p>在传统 Web 应用架构（特别是服务端渲染 + 后端管理会话的模式）中，一个常见流程是：</p><div class="vp-steps"><ol><li>用户提交用户名 + 密码给服务器；</li><li>服务器验证成功后，在服务器端生成一个 Session（如存入内存、Redis、数据库等），并给客户端返回一个 session id；</li><li>客户端浏览器以 Cookie 的方式保存 session id，并在后续每个请求里自动带上；</li><li>服务器根据这个 session id 查到对应的用户信息，就知道这是哪个登录用户，从而进行权限判断、返回数据等。</li></ol></div><p>这种方式的问题或局限包括：</p><ul><li><strong>状态性（Stateful）</strong>：服务器必须维护一个 session 存储。</li><li><strong>扩展性问题</strong>：如果你有多台后端服务器，session 必须共享。</li><li><strong>适配性</strong>：Cookie 在跨域、子域、移动端 API 调用里比较麻烦。</li><li><strong>性能</strong>：每次请求都要查 session 存储，造成 I/O 开销。</li></ul><p>随着越来越多的应用架构向 <strong>前后端分离</strong>、<strong>多域名服务</strong> 等发展，传统 session 模式的缺点就越来越明显。</p><p>于是应运而生一种“无状态（stateless）”的认证方式 —— <strong>Token 机制</strong>，而 JWT 是目前被广泛采用的一种标准格式的 token。</p><h3 id="token-jwt-的优点-为什么要用-jwt" tabindex="-1"><a class="header-anchor" href="#token-jwt-的优点-为什么要用-jwt"><span>Token / JWT 的优点（为什么要用 JWT）</span></a></h3><p>JWT 作为一种常见的 token 机制，带来了以下好处：</p><ul><li><p><strong>无状态 / 自包含（Stateless &amp; Self-contained）</strong></p><p>JWT 本身就包含必要的信息（如用户 ID、权限、过期时间等），服务器验证时只需校验签名即可，不必查数据库/会话存储（当然某些场景仍会查），减少了服务器的状态管理压力。</p></li><li><p><strong>跨域 / 跨服务 / 多端一致性</strong></p><p>因为 JWT 是标准字符串（通常通过 HTTP Header 带上），你可以很方便地在不同服务、不同子域、移动端使用。</p></li><li><p><strong>灵活承载用户信息</strong></p><p>在 token 的 payload 部分，你可以放一些附加声明（claims），如用户角色、权限、用户名、用户 ID 等。这样下游服务可以根据 token 里的信息快速做权限判断，无需额外查库。</p></li><li><p><strong>性能提升</strong></p><p>减少因为查 session、查数据库带来的 I/O 开销。</p></li><li><p><strong>标准化 &amp; 生态丰富</strong></p><p>JWT 是一个开标准（RFC 7519），有很多成熟的库支持各种语言和中间件。</p></li></ul><h2 id="jwt-是什么" tabindex="-1"><a class="header-anchor" href="#jwt-是什么"><span>JWT 是什么？</span></a></h2><h3 id="基本定义" tabindex="-1"><a class="header-anchor" href="#基本定义"><span>基本定义</span></a></h3><p>JWT 即 <strong>JSON Web Token</strong>，是一个使用 JSON 表示声明（claims），并带有签名的令牌，用于在各方之间安全地传递信息。它可以用于认证、授权、信息交换（claim 传递）等场景。</p><p>其由三部分组成</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> header</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> payload</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> signature</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>三部分都是经过 Base64Url 编码（而不是标准 Base64），然后用点 “.” 连接起来。</p><h4 id="header" tabindex="-1"><a class="header-anchor" href="#header"><span>Header</span></a></h4><p>Header 通常包含两个关键字段：</p><ul><li><strong>alg</strong>：指定签名算法，例如 HS256（HMAC + SHA256）、RS256（RSA + SHA256）等</li><li><strong>typ</strong>：通常设置为 “JWT”</li></ul><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">typ</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">JWT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">alg</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">HS256</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后 Base64Url 编码，就变成 header 部分。</p><h4 id="payload" tabindex="-1"><a class="header-anchor" href="#payload"><span>payload</span></a></h4><p>Payload 部分包含“声明（claims）”，即一些要传递的信息／断言。比如用户 ID、用户名、角色、token 颁发时间、过期时间等。</p><p>标准（注册）声明有一些保留字段，包括但不限于：</p><table><thead><tr><th>Claim 名称</th><th>含义</th></tr></thead><tbody><tr><td>iss</td><td>发行者（issuer）</td></tr><tr><td>sub</td><td>主题 / 面向的主体（通常是用户 ID）</td></tr><tr><td>aud</td><td>接收方（受众）</td></tr><tr><td>exp</td><td>过期时间（Expiration Time）</td></tr><tr><td>nbf</td><td>在此时间之前不可用（Not Before）</td></tr><tr><td>iat</td><td>颁发时间（Issued At）</td></tr><tr><td>jti</td><td>JWT 唯一标识 ID</td></tr></tbody></table><p>除此之外，还可以添加自定义的声明字段。但不要放太敏感的信息（如密码），因为 JWT 虽然签名了，但 payload 是可读的。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">sub</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">114514</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Joker</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">role</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">joker</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">iat</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1630000000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exp</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1630003600</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="signature" tabindex="-1"><a class="header-anchor" href="#signature"><span>Signature</span></a></h4><p>签名部分的作用是保证 <strong>token 的完整性与真实性</strong>。也就是说，接收方可以校验这个 token 是不是被篡改过、确实是由发行方签发的。</p><p>签名的计算方法通常如下（以 HS256 为例）：</p><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-makefile"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">signature</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HMAC_SHA256(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    secret_key</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于使用 RSA / ECDSA 的算法，则是用私钥生成签名，公钥验证。这样签名者和验证者可以区分角色。</p><p>最终完整的 token 形式就是这样的字符串：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>HEADER_BASE64.PAYLOAD_BASE64.SIGNATURE_BASE64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>客户端接收到这个完整字符串后，在后续请求中带上，服务端就可以按同样方式验证签名，并确认 payload 是否被修改。</p><h2 id="jwt-的工作流程" tabindex="-1"><a class="header-anchor" href="#jwt-的工作流程"><span>JWT 的工作流程</span></a></h2><p>下面用一个“前端 + 后端 API”的例子来说明 JWT 在实际中的流程。</p><h3 id="典型流程" tabindex="-1"><a class="header-anchor" href="#典型流程"><span>典型流程</span></a></h3><div class="vp-steps"><ol><li><p>登录 / 认证 （Authentication）</p><p>前端用户填写用户名 / 密码，提交给后端 login 接口。</p><p>后端验证用户名 / 密码。如果认证成功，那么后端生成一个 JWT，包含用户 ID、角色、过期时间等信息。</p><p>后端把这个 JWT 返回给前端。</p></li><li><p>前端保存 token</p><p>前端收到 JWT 后，一般存储在合适的位置（如 Http Only Cookie）</p></li><li><p>请求受保护接口时带上 token</p><p>前端在每次调用后端受保护 API 时，在 HTTP 请求头里添加 <code>Authorization: Bearer &lt;token&gt;</code>。</p><p>后端收到请求，将 Authorization 头里的 token 取出来，做验证。</p></li><li><p>服务端验证 token</p><p>后端使用事先保存的 secret（对于 HMAC）或公钥（对于 RSA/ECDSA）对 token 的签名进行校验。</p><p>如果签名不正确、token 过期、被篡改、不可用等，都拒绝访问。</p><p>如果验证通过，解析 payload 得到用户身份信息（如用户 ID、角色等），然后可以继续做权限判断、返回数据等。</p></li><li><p>刷新 / 续期</p><p>通常 JWT 会带 <code>exp</code>（过期时间），过期后就不能再用。</p><p>为了用户体验，通常还会设计一个 refresh token 的机制：短期有效的 access token + 长期有效的 refresh token。前端可以通过 refresh token 来获取新的 access token。</p><p>这样可以缩短 access token 的有效期，降低被盗风险；同时又不强迫用户频繁登录。</p></li><li><p>维护黑名单</p><p>在用户登出时，为防止原本 token 继续被使用，通常会将原本的 token 拉入黑名单</p></li></ol></div><h2 id="实际示例" tabindex="-1"><a class="header-anchor" href="#实际示例"><span>实际示例</span></a></h2><p>以下为 Django REST framework 中使用 JWT 的示例</p><p>安装库</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> djangorestframework-simplejwt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在鉴权 view 中导入相关方法</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> rest_framework_simplejwt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">tokens </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RefreshToken</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> rest_framework_simplejwt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">exceptions </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TokenError</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>用户登陆时生成 JWT Token</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">refresh </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RefreshToken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">for_user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">access</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">refresh</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">access_token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">refresh</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">refresh</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户登出时维护黑名单</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">refresh_token </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">refresh</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> refresh_token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    token </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RefreshToken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">refresh_token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">blacklist</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Refresh token</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    refresh </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RefreshToken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">refresh_token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    access_token </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> refresh</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">access_token</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">access</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">access_token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">refresh</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">refresh</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    })</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">except</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TokenError </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> //</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">验证 Token 有效</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">error</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Invalid token</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">401</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54)])])}const p=i(t,[["render",h]]),r=JSON.parse('{"path":"/blog/0r4vvjv1/","title":"JWT（JSON Web Token）教程","lang":"zh-CN","frontmatter":{"title":"JWT（JSON Web Token）教程","createTime":"2025/10/2 21:28:56","permalink":"/blog/0r4vvjv1/","tags":["后端"],"description":"JSON Web Token (JWT) is a compact URL-safe means of representing claims to be transferred between two parties. 背景：我们为什么需要 JWT？ 先从认证（Authentication）/授权（Authorization）谈起，讲讲 JWT 解决...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JWT（JSON Web Token）教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-13T03:46:24.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.honahec.cc/blog/0r4vvjv1/"}],["meta",{"property":"og:site_name","content":"云朵角落"}],["meta",{"property":"og:title","content":"JWT（JSON Web Token）教程"}],["meta",{"property":"og:description","content":"JSON Web Token (JWT) is a compact URL-safe means of representing claims to be transferred between two parties. 背景：我们为什么需要 JWT？ 先从认证（Authentication）/授权（Authorization）谈起，讲讲 JWT 解决..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-13T03:46:24.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:modified_time","content":"2025-10-13T03:46:24.000Z"}]]},"readingTime":{"minutes":5.77,"words":1731},"git":{"createdTime":1760183675000,"updatedTime":1760327184000,"changelog":[{"hash":"a9fa47ffbcb8c33df6face2828fc56bc9bbf7429","time":1760327184000,"email":"honahec@gmail.com","author":"honahec","message":"Formats JWT authentication flows into structured steps"},{"hash":"ec3563c3acade135fdc89eaed9b79d11b94986d2","time":1760183675000,"email":"honahec@gmail.com","author":"Honahec","message":"Reforges the blog powered by Vuepress Plume"}]},"autoDesc":true,"filePathRelative":"blog/JWT.md","headers":[]}');export{p as comp,r as data};
