import{_ as i,c as a,a3 as t,o as e}from"./chunks/framework.ohJJpums.js";const c=JSON.parse('{"title":"Git 教程","description":"","frontmatter":{"permalink":"/blog/kjrbhsvq/"},"headers":[],"relativePath":"blog/kjrbhsvq/index.md","filePath":"blog/git.md","lastUpdated":1759158251000}'),h={name:"blog/kjrbhsvq/index.md"};function n(p,s,l,o,d,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="git-教程" tabindex="-1">Git 教程 <a class="header-anchor" href="#git-教程" aria-label="Permalink to &quot;Git 教程&quot;">​</a></h1><h2 id="一些声明" tabindex="-1">一些声明 <a class="header-anchor" href="#一些声明" aria-label="Permalink to &quot;一些声明&quot;">​</a></h2><p>你理应对 Git 有基本的了解</p><blockquote><p><em>Git</em> is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p></blockquote><p>另外，你大可以使用比如 vscode 中极为方便的插件，比如自带的仓库管理器和 GitLen 插件，但我仍认为应掌握 Git 的基本用法 <s>（也许还有一些进阶用法）</s></p><h2 id="安装-git" tabindex="-1">安装 git <a class="header-anchor" href="#安装-git" aria-label="Permalink to &quot;安装 git&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>安装成功将会输出 git 版本号</p><h2 id="git-换源-可选" tabindex="-1">git 换源（可选） <a class="header-anchor" href="#git-换源-可选" aria-label="Permalink to &quot;git 换源（可选）&quot;">​</a></h2><p>请注意，示例提供的方法无法使用<code>git push</code>，<strong>只在云服务器上使用</strong></p><p><strong>本地建议开启虚拟网卡</strong></p><p>国内使用 git 时常发生抽风的现象</p><p>可全局更改使用镜像网站下载</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> url.&quot;https://ghproxy.cc/https://github.com/&quot;.insteadOf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/&quot;</span></span></code></pre></div><p>使用 <code>vi ~/.gitconfig</code> 命令即可查看当前的配置文件，看到以下配置：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[url </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://ghproxy.cc/https://github.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        insteadOf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/</span></span></code></pre></div><p>即配置成功</p><h2 id="本地连接-github-的-ssh-密钥" tabindex="-1">本地连接 GitHub 的 SSH 密钥 <a class="header-anchor" href="#本地连接-github-的-ssh-密钥" aria-label="Permalink to &quot;本地连接 GitHub 的 SSH 密钥&quot;">​</a></h2><h3 id="生成-ssh-密钥" tabindex="-1">生成 SSH 密钥 <a class="header-anchor" href="#生成-ssh-密钥" aria-label="Permalink to &quot;生成 SSH 密钥&quot;">​</a></h3><p>如果你本地没有生成过 ssh 密钥，在终端执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4096</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your_email@example.com&quot;</span></span></code></pre></div><p>按照提示操作，通常直接按回车即可使用默认路径和文件名</p><h3 id="将公钥添加到-github" tabindex="-1">将公钥添加到 GitHub <a class="header-anchor" href="#将公钥添加到-github" aria-label="Permalink to &quot;将公钥添加到 GitHub&quot;">​</a></h3><p>复制公钥内容到剪贴板：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa.pub</span></span></code></pre></div><p>然后登录 GitHub，进入 <strong>Settings</strong> &gt; <strong>SSH and GPG keys</strong>，点击 <strong>New SSH key</strong>，将复制的公钥粘贴到对应的框中，填写一个标题（随意），然后保存</p><h3 id="连接测试" tabindex="-1">连接测试 <a class="header-anchor" href="#连接测试" aria-label="Permalink to &quot;连接测试&quot;">​</a></h3><p>运行以下命令测试连接是否成功：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com</span></span></code></pre></div><p>如果一切正常，你应该会看到一条欢迎信息。</p><h3 id="在受限网络环境下使用-ssh" tabindex="-1">在受限网络环境下使用 SSH <a class="header-anchor" href="#在受限网络环境下使用-ssh" aria-label="Permalink to &quot;在受限网络环境下使用 SSH&quot;">​</a></h3><p>如你所处环境无法使用 22 端口</p><p>可以配置<code>~/.ssh/config</code>文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HostName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh.github.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    User</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 443</span></span></code></pre></div><h2 id="将本地文件上传到-github" tabindex="-1">将本地文件上传到 GitHub <a class="header-anchor" href="#将本地文件上传到-github" aria-label="Permalink to &quot;将本地文件上传到 GitHub&quot;">​</a></h2><p>git 的原理是，你同时拥有一个本地仓库和一个远程仓库</p><p>请注意：<strong>本地仓库不等于本地文件夹</strong></p><p>对于最简单的情况，git 可以帮你同步这两个仓库</p><h3 id="创建一个-github-仓库" tabindex="-1">创建一个 GitHub 仓库 <a class="header-anchor" href="#创建一个-github-仓库" aria-label="Permalink to &quot;创建一个 GitHub 仓库&quot;">​</a></h3><ul><li><p>登录你的 GitHub 账号。</p></li><li><p>点击右上角的 “+” 按钮，选择 “New repository”。</p></li><li><p>填写仓库名称和描述，选择是否公开或私有，然后点击 “Create repository”。</p></li></ul><h3 id="在本地初始化-git-仓库" tabindex="-1">在本地初始化 Git 仓库 <a class="header-anchor" href="#在本地初始化-git-仓库" aria-label="Permalink to &quot;在本地初始化 Git 仓库&quot;">​</a></h3><p>打开终端或命令提示符，进入你想上传的文件夹，运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>此命令相当于你创建了一个本地仓库</p><h3 id="为本地仓库添加文件" tabindex="-1">为本地仓库添加文件 <a class="header-anchor" href="#为本地仓库添加文件" aria-label="Permalink to &quot;为本地仓库添加文件&quot;">​</a></h3><p>首先，我们一般会忽略本地的一些文件例如 node_modules</p><p>在项目根目录下创建<code>.gitignore</code>文件，并添加以下内容</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_modules/</span></span></code></pre></div><p>这会告诉 git 忽略 node_modules 文件夹中的所有文件。</p><p>同理还有 .vscode 里的大部分等等</p><p>可以使用<code>!</code>来排除某些文件被忽略，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.vscode/*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.vscode/extensions.json</span></span></code></pre></div><p>这意味着，git 会忽略 .vscode 文件夹中 <strong>除了</strong> extensions.json 之外的所有文件。</p><p>将你要上传的文件添加到 git 暂存区：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p><code>.</code>表示添加当前目录下的所有文件，你也可以指定某个文件名</p><p>例如：<code>git add README.md</code> 代表只上传 README.md 文件（覆盖）</p><h3 id="提交更改" tabindex="-1">提交更改 <a class="header-anchor" href="#提交更改" aria-label="Permalink to &quot;提交更改&quot;">​</a></h3><p>提交你添加的文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your commit&quot;</span></span></code></pre></div><p><strong>尽可能规范你所有 commit 的格式，有助于版本管理和合作</strong></p><h3 id="关联远程仓库" tabindex="-1">关联远程仓库 <a class="header-anchor" href="#关联远程仓库" aria-label="Permalink to &quot;关联远程仓库&quot;">​</a></h3><p>将本地仓库与 GitHub 仓库关联：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/你的用户名/仓库名.git</span></span></code></pre></div><p>与远程仓库关联后，可以使用<code>git remote -v</code>查看当前关联的远程仓库</p><p>与远程仓库断开连接：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span></code></pre></div><h3 id="将本地仓库推送到-github" tabindex="-1">将本地仓库推送到 GitHub <a class="header-anchor" href="#将本地仓库推送到-github" aria-label="Permalink to &quot;将本地仓库推送到 GitHub&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><p>其中 <code>main</code> 为你的分支名</p><p>完成后，你的文件就会出现在 GitHub 的仓库中。</p><h2 id="在本地仓库删除部分文件" tabindex="-1">在本地仓库删除部分文件 <a class="header-anchor" href="#在本地仓库删除部分文件" aria-label="Permalink to &quot;在本地仓库删除部分文件&quot;">​</a></h2><h3 id="预览将要删除的文件" tabindex="-1">预览将要删除的文件 <a class="header-anchor" href="#预览将要删除的文件" aria-label="Permalink to &quot;预览将要删除的文件&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cached</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件/文件夹名称</span></span></code></pre></div><p>加上 <code>-n</code> 这个参数，执行命令时，是不会删除任何文件，只是展示此命令要删除的文件列表预览</p><h3 id="确认无误后删除文件" tabindex="-1">确认无误后删除文件 <a class="header-anchor" href="#确认无误后删除文件" aria-label="Permalink to &quot;确认无误后删除文件&quot;">​</a></h3><p>此操作不会删除本地的文件或文件夹</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cached</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件/文件夹名称</span></span></code></pre></div><p>之后正常 commit &amp;&amp; push 即可</p><h2 id="更新本地仓库" tabindex="-1">更新本地仓库 <a class="header-anchor" href="#更新本地仓库" aria-label="Permalink to &quot;更新本地仓库&quot;">​</a></h2><h3 id="在云服务器上拉取-github-仓库" tabindex="-1">在云服务器上拉取 GitHub 仓库 <a class="header-anchor" href="#在云服务器上拉取-github-仓库" aria-label="Permalink to &quot;在云服务器上拉取 GitHub 仓库&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/用户名/仓库名.git</span></span></code></pre></div><img src="https://image.honahec.cc/git-clone.png" alt="链接来源" style="zoom:50%;"><blockquote><p>一般建议使用 SSH 连接（需要配置 SSH 密钥）</p></blockquote><h3 id="从远程仓库更新本地仓库" tabindex="-1">从远程仓库更新本地仓库 <a class="header-anchor" href="#从远程仓库更新本地仓库" aria-label="Permalink to &quot;从远程仓库更新本地仓库&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div><h2 id="一些实用功能" tabindex="-1">一些实用功能 <a class="header-anchor" href="#一些实用功能" aria-label="Permalink to &quot;一些实用功能&quot;">​</a></h2><h3 id="修改commit" tabindex="-1">修改commit <a class="header-anchor" href="#修改commit" aria-label="Permalink to &quot;修改commit&quot;">​</a></h3><p>假设你更新了某个功能，但是忘记更新 README.md 了，又不想二次 commit 污染你的版本管理</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --amend</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xxx&quot;</span></span></code></pre></div><p>此时，git 会自动为你创建一个分支提交形如</p><img src="https://image.honahec.cc/commit%20amend.png" style="zoom:150%;"><p>而后，若你本次修改与它的并行修改无冲突，直接同步即可，若存在冲突则需要简单 merge 一下（如果不简单就没必要这样了对吗）</p><p><strong>另外，你还可以 <code>git commit --amend --no-edit</code> 创建一个与它并行修改相同 commit 的提交</strong></p><h3 id="关于merge" tabindex="-1">关于merge <a class="header-anchor" href="#关于merge" aria-label="Permalink to &quot;关于merge&quot;">​</a></h3><p>在你 push 或者 pull 时，存在本地仓库与远程仓库的冲突，则需要选择保留哪些，在 vscode 中提供了可视化的选择方案，极为方便</p><p>处理所有冲突后进行同步，会创建一个 commit 形如 <code>Merge branch &#39;xxx&#39; of github.com:xxx/xxx</code></p><h2 id="一些偏门知识" tabindex="-1">一些偏门知识 <a class="header-anchor" href="#一些偏门知识" aria-label="Permalink to &quot;一些偏门知识&quot;">​</a></h2><h4 id="git对象" tabindex="-1"><a href="/blog/iftjzdbk/">Git对象</a> <a class="header-anchor" href="#git对象" aria-label="Permalink to &quot;[Git对象](./GitObject.md)&quot;">​</a></h4>`,99)]))}const g=i(h,[["render",n]]);export{c as __pageData,g as default};
