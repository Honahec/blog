import{_ as t,c as s,a3 as n,o as i}from"./chunks/framework.ohJJpums.js";const g=JSON.parse('{"title":"Git 对象","description":"","frontmatter":{"giscus":3,"permalink":"/blog/iftjzdbk/"},"headers":[],"relativePath":"blog/iftjzdbk/index.md","filePath":"blog/GitObject.md","lastUpdated":1760089713000}'),e={name:"blog/iftjzdbk/index.md"};function l(p,a,d,o,c,h){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="git-对象" tabindex="-1">Git 对象 <a class="header-anchor" href="#git-对象" aria-label="Permalink to &quot;Git 对象&quot;">​</a></h1><blockquote><p>本段内容为 Git 较为底层的实现，并非 Git 教程，请确保你有足够的好奇并基本掌握 Git 用法后再看</p></blockquote><h2 id="git-对象模型总览-git-object-model" tabindex="-1">Git 对象模型总览（Git Object Model） <a class="header-anchor" href="#git-对象模型总览-git-object-model" aria-label="Permalink to &quot;Git 对象模型总览（Git Object Model）&quot;">​</a></h2><p>Git 的核心是一个 <strong>内容寻址文件系统</strong>（Content-Addressable Filesystem）：</p><ul><li>一切数据都以 <strong>对象（Object）</strong> 存储；</li><li>每个对象都通过其内容的 <strong>SHA-1 哈希</strong>（40 个十六进制字符）来唯一标识；</li><li>所有对象都放在 .git/objects/ 目录（或打包为 .pack 文件）。</li></ul><p>Git 有 <strong>四种对象类型</strong>：</p><table tabindex="0"><thead><tr><th>类型</th><th>作用</th><th>内容结构</th><th>典型命令</th></tr></thead><tbody><tr><td>blob</td><td>存储文件内容</td><td>文件原始内容</td><td><code>git cat-file -p &lt;sha&gt;</code></td></tr><tr><td>tree</td><td>表示目录（含文件名、权限、blob 引用）</td><td>目录项列表</td><td><code>git cat-file -p &lt;tree-sha&gt;</code></td></tr><tr><td>commit</td><td>表示一次提交</td><td>指向一个 tree + 元数据（作者、时间、父提交等）</td><td><code>git cat-file -p &lt;commit-sha&gt;</code></td></tr><tr><td>tag</td><td>可读标签对象，指向其他对象</td><td>指向 commit/blob/tree/tag，含签名信息</td><td><code>git cat-file -p &lt;tag-sha&gt;</code></td></tr></tbody></table><h3 id="git-对象的存储形式" tabindex="-1">Git 对象的存储形式 <a class="header-anchor" href="#git-对象的存储形式" aria-label="Permalink to &quot;Git 对象的存储形式&quot;">​</a></h3><p>对象保存于 .git/objects/xx/yyyy...：</p><ul><li>其中 xx 是哈希前两位（目录名），yyyy... 是后 38 位（文件名）。</li><li>内容是 <strong>zlib 压缩后的二进制数据</strong>，Git 通过 git cat-file 自动解压。</li></ul><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.git/</span></span>
<span class="line"><span> └─ objects/</span></span>
<span class="line"><span>    ├─ 22/</span></span>
<span class="line"><span>    │  └─ 88acb0c1d3ddea...   ← blob/tree/commit 压缩文件</span></span>
<span class="line"><span>    ├─ 4b/</span></span>
<span class="line"><span>    │  └─ 825dc642cb6e...     ← 空树对象（固定）</span></span></code></pre></div><h3 id="对象间的关系-git-的-dag" tabindex="-1">对象间的关系（Git 的 DAG） <a class="header-anchor" href="#对象间的关系-git-的-dag" aria-label="Permalink to &quot;对象间的关系（Git 的 DAG）&quot;">​</a></h3><p>Git 通过对象间引用构建出 <strong>有向无环图 (DAG)</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[commit] ──→ [tree] ──┬─→ [blob] (file1)</span></span>
<span class="line"><span>                      ├─→ [blob] (file2)</span></span>
<span class="line"><span>                      └─→ [tree] (subdir)</span></span></code></pre></div><ul><li>commit 指向一个 tree，表示该提交时的目录结构；</li><li>tree 包含若干 blob（文件内容）；</li><li>commit 还可以引用一个或多个 parent commit（形成历史链条）。</li></ul><h3 id="查看与操作对象的常用命令" tabindex="-1">查看与操作对象的常用命令 <a class="header-anchor" href="#查看与操作对象的常用命令" aria-label="Permalink to &quot;查看与操作对象的常用命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>git hash-object &lt;file&gt;</code></td><td>计算文件内容对应的对象哈希</td></tr><tr><td><code>git cat-file -p &lt;sha&gt;</code></td><td>解压并显示对象内容</td></tr><tr><td><code>git cat-file -t &lt;sha&gt;</code></td><td>显示对象类型</td></tr><tr><td><code>git rev-list --all --objects</code></td><td>列出所有对象及其文件路径</td></tr><tr><td><code>git fsck --full --no-reflogs --lost-found</code></td><td>扫描丢失的对象（dangling）并放入 .git/lost-found</td></tr><tr><td><code>git show &lt;sha&gt;</code></td><td>智能展示对象内容（根据类型）</td></tr></tbody></table><h3 id="dangling-lost-object-孤儿对象" tabindex="-1">Dangling / Lost Object（孤儿对象） <a class="header-anchor" href="#dangling-lost-object-孤儿对象" aria-label="Permalink to &quot;Dangling / Lost Object（孤儿对象）&quot;">​</a></h3><p>当提交被删除、分支被清空、HEAD 丢失时，对象还在 .git/objects 中，但不再被引用：</p><ul><li>git fsck 会提示 dangling blob 或 dangling commit；</li><li>这些对象通常可通过 .git/lost-found 找回。</li></ul><p>恢复流程：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fsck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --full</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-reflogs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --lost-found</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/lost-found/other</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="packfile-对象打包" tabindex="-1">packfile（对象打包） <a class="header-anchor" href="#packfile-对象打包" aria-label="Permalink to &quot;packfile（对象打包）&quot;">​</a></h3><p>当仓库历史多时，Git 会将松散对象打包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.git/objects/pack/pack-xxxx.pack</span></span>
<span class="line"><span>.git/objects/pack/pack-xxxx.idx</span></span></code></pre></div><p>查看其中对象：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verify-pack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/objects/pack/pack-xxxx.pack</span></span></code></pre></div><p>或用 <code>git cat-file -p &lt;sha&gt;</code>（Git 会自动从 pack 中解压）。</p><h3 id="一些特殊对象" tabindex="-1">一些特殊对象 <a class="header-anchor" href="#一些特殊对象" aria-label="Permalink to &quot;一些特殊对象&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>SHA</th><th>说明</th></tr></thead><tbody><tr><td>空树对象</td><td>4b825dc642cb6eb9a060e54bf8d69288fbee4904</td><td>所有空目录都是它</td></tr><tr><td>空 blob</td><td>e69de29bb2d1d6434b8b29ae775ad8c2e48c5391</td><td>空文件内容</td></tr></tbody></table><h2 id="git-对象结构图" tabindex="-1">Git 对象结构图 <a class="header-anchor" href="#git-对象结构图" aria-label="Permalink to &quot;Git 对象结构图&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+---------------------+</span></span>
<span class="line"><span>|  commit object      |</span></span>
<span class="line"><span>|---------------------|</span></span>
<span class="line"><span>| tree: &lt;sha1&gt;        | → 指向目录结构</span></span>
<span class="line"><span>| parent: &lt;sha1&gt;      | → 指向上一个 commit</span></span>
<span class="line"><span>| author/committer    |</span></span>
<span class="line"><span>| message             |</span></span>
<span class="line"><span>+---------------------+</span></span>
<span class="line"><span>          |</span></span>
<span class="line"><span>          v</span></span>
<span class="line"><span>+---------------------+</span></span>
<span class="line"><span>| tree object         |</span></span>
<span class="line"><span>|---------------------|</span></span>
<span class="line"><span>| mode blob &lt;sha1&gt; f1 | → 文件内容</span></span>
<span class="line"><span>| mode blob &lt;sha1&gt; f2 |</span></span>
<span class="line"><span>| mode tree &lt;sha1&gt; d1 |</span></span>
<span class="line"><span>+---------------------+</span></span>
<span class="line"><span>          |</span></span>
<span class="line"><span>          v</span></span>
<span class="line"><span>+---------------------+</span></span>
<span class="line"><span>| blob object         |</span></span>
<span class="line"><span>|---------------------|</span></span>
<span class="line"><span>| (file content...)   |</span></span>
<span class="line"><span>+---------------------+</span></span></code></pre></div>`,33)]))}const b=t(e,[["render",l]]);export{g as __pageData,b as default};
