import{a,c as p,b as n,f as l,w as o,r as c,o as r,d as e}from"./app-BVfeNsmt.js";const s={};function g(d,t){const i=c("VPTable");return r(),p("div",null,[t[1]||(t[1]=n('<blockquote><p>引言：</p><p>每天上班要登录 OA、CRM、财务系统……密码多到记不住？一不小心全设成“123456”又怕被一锅端？别慌！单点登录（SSO） 这把“万能钥匙”能救你于水火，但用不好也可能变成黑客的“黄金通行证”。今天我们就用大白话+图解，拆解 SSO 的奥秘及安全风险！</p></blockquote><h2 id="_1-什么是单点登录" tabindex="-1"><a class="header-anchor" href="#_1-什么是单点登录"><span>1. 什么是单点登录？</span></a></h2><p>单点登录 (Single Sign-On, SSO) 是一种身份验证方案，允许用户使用一组凭据（例如，用户名和密码）访问多个应用程序或网站。这意味着用户只需登录一次，就可以访问所有被授权的系统，而无需为每个系统单独登录。</p><p>举个简单例子，你登录了百度账号（baidu.com/），接下来你再访问以下站点都将是登录状态，无需再重复登录。</p><p>百度网盘：pan.baidu.com/</p><p>百度文库：wenku.baidu.com/</p><p>文心一言：yiyan.baidu.com/</p><p>百度翻译：fanyi.baidu.com/</p><p>单点登录的核心目标就是为了提升用户体验，简化登录流程。</p><h2 id="_2-为什么要用-sso" tabindex="-1"><a class="header-anchor" href="#_2-为什么要用-sso"><span>2. 为什么要用 SSO？</span></a></h2><ul><li><p><strong>提升用户体验</strong> ：用户只需记住一组登录凭据，即可访问多个系统，操作更便捷。</p></li><li><p><strong>增强安全性和管理效率</strong> ：减少密码数量，降低泄露风险，同时集中管理账户，简化运维工作。如果没有 SSO，员工在公司入职时，就需要为每一个应用注册账号，同样，在有员工离职时，管理员也要在每个应用中停用员工注册的账号。若有了 SSO，便可直接在 IdP（身份提供商）中删除其账号。</p></li><li><p><strong>易于系统集成</strong> ：实现跨应用的身份信息共享，提高系统间的协作与集成能力。</p></li></ul><h2 id="_3-sso-技术实现原理" tabindex="-1"><a class="header-anchor" href="#_3-sso-技术实现原理"><span>3. SSO 技术实现原理</span></a></h2><p>SSO 有很多实现方式，如果应用的一级域名相同（上面百度的例子，一级域名都是 baidu），在用户登录成功后设置一个对所有子域名都生效的 Cookie，便可以在所有子域名应用（wenku、yige）中自动登录。</p><figure><img src="https://pic3.zhimg.com/v2-8c4f3f27b3cc2a5ed4e6b7a284d578d2_1440w.jpg" alt="百度系Web站点共享cookie" tabindex="0" loading="lazy"><figcaption>百度系Web站点共享cookie</figcaption></figure><p>但是，要实现跨域单点登录，就不能使用简单的共享 Cookie 方案了，经典的跨域单点登录方式有：</p><ul><li><strong>CAS</strong>：Central Authentication Service</li><li><strong>OAuth2</strong>：Open Authorizaion</li><li><strong>OIDC</strong>：OpenID Connect</li><li><strong>SAML</strong>：Security Assertion Markup Language</li></ul><p>在介绍以上四种实现方式前，需要先知道以下三个<strong>核心概念</strong>：</p><ul><li><p><strong>身份提供商 (Identity Provider, IdP)</strong>: 负责验证用户身份的系统。当用户尝试访问某个应用程序时，该应用程序会将用户重定向到 IdP 进行身份验证。</p></li><li><p><strong>服务提供商 (Service Provider, SP)</strong>: 用户尝试访问的应用程序或网站。SP 依赖于 IdP 来验证用户的身份。</p></li><li><p><strong>信任关系</strong>: SP 和 IdP 之间需要建立信任关系，以便 SP 可以信任 IdP 提供的身份验证结果。</p></li></ul><h3 id="_3-1-cas" tabindex="-1"><a class="header-anchor" href="#_3-1-cas"><span>3.1. CAS</span></a></h3><p>CAS 是一个被广泛应用的 SSO 系统，最初由耶鲁大学于 2000-2002 年研发，主要目的是为 Web 应用提供一种标准化的单点登录方案。</p><figure><img src="https://pic2.zhimg.com/v2-5295f27743b99e8e95f639b65b7b1b9b_1440w.jpg" alt="CAS起源于耶鲁大学（2000-2002年）" tabindex="0" loading="lazy"><figcaption>CAS起源于耶鲁大学（2000-2002年）</figcaption></figure><p>2004 年，耶鲁大学在 Jasig（即后来的 Apereo）的监督下将代码开源。</p><figure><img src="https://picx.zhimg.com/v2-b8e44a9a38aa2d814dbc6ecd641b285f_1440w.jpg" alt="Apereo CAS开源项目" tabindex="0" loading="lazy"><figcaption>Apereo CAS开源项目</figcaption></figure><p>当用户（Web 浏览器）访问 CAS 客户端（Web 应用）时，CAS 客户端会将用户浏览器重定向到 CAS 服务器，用户在 CAS 服务器上进行身份验证（如，用户名密码认证），身份验证通过后 CAS 服务器会再次将用户重定向到 CAS 客户端（携带参数 Service Ticket），CAS 客户端发送 Service Ticket 和自己的服务标识请求 CAS 服务器获取用户信息。</p><p>CAS 单点登录的流程如下图所示：</p><figure><img src="https://pic1.zhimg.com/v2-628461f933a8e2ab8150ef31b2967f80_1440w.jpg" alt="CAS单点登录流程" tabindex="0" loading="lazy"><figcaption>CAS单点登录流程</figcaption></figure><p>流程详细说明：</p><div class="vp-steps"><ol><li><p>CAS 客户端以 Filter（过滤器）方式保护 Web 应用的受保护资源，过滤从客户端过来的每个请求，同时 CAS 客户端会分析 HTTP 请求中是否包含认证 Ticket，如果没有，则说明用户没有经过认证；</p></li><li><p>CAS 客户端重定向用户请求到 CAS 服务器，这里需要提交一个 Service 参数（如 helloservice）用于指定身份验证通过后重定向的目标地址（即 CAS 客户端应用地址），如 https://casserver/login?service=https%3A%2F%2Fhelloservice；</p></li><li><p>用户认证过程：如果用户提供了正确的凭据，服务器会生产一个随机的认证 Ticket（即 Service Ticket），并缓存此 Ticket；</p></li><li><p>服务器重定向用户到 CAS 客户端并且附带刚才产生的认证 Ticket 和自己的服务标识；</p></li><li><p>CAS 客户端将用户的 Ticket 向服务端发起身份确认；</p></li><li><p>CAS 服务器通过 Ticket 确认用户认证并返回用户的信息（如用户名）。</p></li></ol></div><p><strong>注意点：</strong></p><ul><li><p>Ticket 只能使用一次；</p></li><li><p>Ticket 有效期要短（10s~300s）；</p></li><li><p>Ticket 创建采用安全随机数，防止被猜测；</p></li><li><p>CAS 服务器要对 service 中的 URL 进行过滤，避免跳转到恶意网站。（Apereo CAS 官方文档中也明确强调）</p></li></ul><h3 id="_3-2-oauth2-0" tabindex="-1"><a class="header-anchor" href="#_3-2-oauth2-0"><span>3.2. OAuth2.0</span></a></h3><p>OAuth 是一种常用的<strong>授权框架</strong>，使网站和 web 应用程序能够请求对另一个应用程序上的用户账户的有限访问。OAuth 允许用户在不向请求的应用程序公开其登录凭据的情况下授予此访问权限。这意味着用户可以调整他们想要共享的数据，而不必将其账户的完全控制权交给第三方。</p><p>OAuth 2.0 和 OAuth 1.0 都是授权框架，用于允许第三方应用访问用户资源，但它们在实现细节和设计理念上存在显著差异。<strong>OAuth 1.0 由于存在安全问题基本已经被废弃，很少再使用。</strong></p><figure><img src="https://picx.zhimg.com/v2-7e636ff446a8724f3586ab2fb655e0d3_1440w.jpg" alt="通过QQ来登录知乎时提示用户授予知乎相关权限" tabindex="0" loading="lazy"><figcaption>通过QQ来登录知乎时提示用户授予知乎相关权限</figcaption></figure><p>OAuth 2.0 核心的步骤之一是让应用从授权中心获取访问令牌（Access Token），由于 OAuth2.0 的设计较为复杂，本文不会详细展开，感兴趣的读者可以关注我，博主在后期会用通俗易懂的语言结合实际案例给大家讲透彻 OAuth 2.0 的工作机制及其安全性分析。</p><h3 id="_3-3-oidc" tabindex="-1"><a class="header-anchor" href="#_3-3-oidc"><span>3.3. OIDC</span></a></h3><p>OAuth 2.0 本身主要用于授权（允许第三方应用访问你的资源，但不直接证明你是谁），OIDC（OpenID Connect）是在 OAuth2.0 的基础上增加了身份认证（明确用户身份）功能，所以<strong>OIDC 具备了身份认证和授权两种功能，是实现单点登录更加标准的方式。</strong></p><p>OIDC 是一个成熟、开放的标准（由 OpenID 基金会管理），被广泛采用和支持。各种语言、框架、云服务和 IdP 都有成熟的库和实现。</p><figure><img src="https://picx.zhimg.com/v2-ab663e68b6edf4f019ff8c40f893a2b9_1440w.jpg" alt="OIDC协议套件" tabindex="0" loading="lazy"><figcaption>OIDC协议套件</figcaption></figure><blockquote><p>关于 OIDC 协议的工作机制将会在后期博文中详细展开，这里大家只要记住 OIDC 并不是一个独立的协议，而是构建在广泛使用的 OAuth 2.0 授权框架之上的一个身份认证层。</p></blockquote><p>OIDC 通过巧妙地扩展 OAuth 2.0，提供了一个强大、安全且现代化的标准，专门用于实现身份认证和单点登录。其基于 JSON/JWT 的设计、良好的安全模型、广泛的行业支持以及对各种应用类型的适应性，使其成为构建现代 Web、移动和企业应用 SSO 解决方案的首选协议。</p><p>不论是社交媒体登录(如 Facebook、Twitter)还是构建企业内部统一的身份认证平台，OIDC 都是核心的支撑技术。</p><h3 id="_3-4-saml" tabindex="-1"><a class="header-anchor" href="#_3-4-saml"><span>3.4. SAML</span></a></h3><p>SAML 是一种基于 XML 的数据标准，用于交换认证和授权信息。在单点登录场景中，SAML 主要用于在身份提供商（IdP）和服务提供商（SP）之间交换信息。</p><figure><img src="https://picx.zhimg.com/v2-0e5151eff10cc653a7afc6a0a9cd6073_1440w.jpg" alt="AML 工作流程（典型 SSO 场景）" tabindex="0" loading="lazy"><figcaption>AML 工作流程（典型 SSO 场景）</figcaption></figure><p>SAML 是企业级单点登录的<strong>基石协议</strong>，通过标准化 XML 断言和信任链实现安全身份联合。尽管在移动互联网时代逐渐被 OIDC 取代，但在传统企业集成、政府、教育等领域仍是不可替代的解决方案。理解其核心流程（SP → IdP → SP）和关键组件（断言、元数据、签名），是掌握企业身份治理的重要一环。</p>',46)),l(i,{copy:"all",markdown:"eJyNU11v0lAYvudXnEu9UMx+wBLmNMEMWewSvZ6ZYdHIonjHRctGKUj5GMiEgbDIVsyydrqh0Bb4L3rec06v+Auelo/NORfPVds8X+d9n8YRTfeJqKHJiSMhEFqZvlx/4igcXL5/IwTFfXF0Z3445eLl+vMfEI7hqqDmma5D06QHohfmWWjFL4QDqzfkfSSEH/ufPBDW0C1OxGYOhQPvYhG0cPfe7cuJsdWm6Sxp2WDnZ9qIVE5Yx7X6p/pTrhtcRmvRlxuv53pXp4F7FjuSoG6SquHRsC3hXo2aGhKE8NhWlhaWfokSyElnu0PPLGo1nX2ZKIWxnXbhNHeKrc9glmm5w3FUsyDToccGfybfFXbeZ2KSmcfYGjC9zQxp6mq32LBEPig0l/JcOZZIBh6UqGZAW+O+7h1B3sODqud06WJsYDmpPE/IUe4IEf02pLr4J2x2v3kgUjZIVuJ0sL9yIh42WLdCunmmKVDtOCkV9BoUilfNINek5eaEzGmOmOAXRYGtLQTdLCQP5woTomcpdcm5NetuHDlJlQ50aKukkXAl6iK0d2hB9tZIT4ZQUP2QaYEhuxpuQBHyRTwcEfUHx5NWClKyt04wS9AfkbP9WZ6ZJWhlkv5IcgppbE+22FPnmbGVnMz+7wl5o5/hIG9QqwQF5aKGiOkjZ09HgdWgl83nW0SOmCbvv4Bl8r6P7Zpv0f1WF90WGX2SO+S75SWZ1sgrjKt9lEChzedvom+jL2IosPxQ4AURIpvr69FXG7EIF/8p73r/uKdHPu1wA1I5nRTLP9+iH5u7TCrTQZHUVcgcIJfm/ve/AQXL6PU="},{default:o(()=>[...t[0]||(t[0]=[e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"特性"),e("th",null,"SAML"),e("th",null,"OIDC")])]),e("tbody",null,[e("tr",null,[e("td",null,"协议基础"),e("td",null,"XML/SOAP"),e("td",null,"JSON/REST (基于 OAuth 2.0)")]),e("tr",null,[e("td",null,"令牌格式"),e("td",null,"XML 断言"),e("td",null,"JWT (ID Token)")]),e("tr",null,[e("td",null,"主要场景"),e("td",null,"企业级 SSO（B2B、内部系统集成）"),e("td",null,"现代应用、移动端、消费者身份认证")]),e("tr",null,[e("td",null,"传输效率"),e("td",null,"消息体积大（XML 冗余）"),e("td",null,"轻量级（JSON 精简）")]),e("tr",null,[e("td",null,"移动端支持"),e("td",null,"弱（依赖浏览器重定向）"),e("td",null,"原生支持（适用 App 嵌入浏览器）")]),e("tr",null,[e("td",null,"灵活性"),e("td",null,"配置复杂（需处理 XML 签名/加密）"),e("td",null,"开发便捷（标准 JWT 库广泛支持）")]),e("tr",null,[e("td",null,"委托授权"),e("td",null,"不支持（仅认证）"),e("td",null,"支持（可结合 OAuth 2.0 访问 API）")])])],-1),e("blockquote",null,[e("p",null,"选择建议："),e("p",null,"需要对接传统企业系统（如 Microsoft ADFS、Shibboleth）→ SAML"),e("p",null,"构建新应用/移动端/互联网服务 → OIDC")],-1)])]),_:1})])}const u=a(s,[["render",g]]),S=JSON.parse('{"path":"/blog/7xyzj9rf/","title":"什么是单点登录SSO？有哪些常用的实现方式？","lang":"zh-CN","frontmatter":{"title":"什么是单点登录SSO？有哪些常用的实现方式？","createTime":"2025/10/13 10:22:34","permalink":"/blog/7xyzj9rf/","tags":["转载"],"copyright":{"creation":"reprint","author":"全栈安全","source":"https://zhuanlan.zhihu.com/p/1924948480390062830","license":"未知"},"description":"引言： 每天上班要登录 OA、CRM、财务系统……密码多到记不住？一不小心全设成“123456”又怕被一锅端？别慌！单点登录（SSO） 这把“万能钥匙”能救你于水火，但用不好也可能变成黑客的“黄金通行证”。今天我们就用大白话+图解，拆解 SSO 的奥秘及安全风险！ 1. 什么是单点登录？ 单点登录 (Single Sign-On, SSO) 是一种身份...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是单点登录SSO？有哪些常用的实现方式？\\",\\"image\\":[\\"https://pic3.zhimg.com/v2-8c4f3f27b3cc2a5ed4e6b7a284d578d2_1440w.jpg\\",\\"https://pic2.zhimg.com/v2-5295f27743b99e8e95f639b65b7b1b9b_1440w.jpg\\",\\"https://picx.zhimg.com/v2-b8e44a9a38aa2d814dbc6ecd641b285f_1440w.jpg\\",\\"https://pic1.zhimg.com/v2-628461f933a8e2ab8150ef31b2967f80_1440w.jpg\\",\\"https://picx.zhimg.com/v2-7e636ff446a8724f3586ab2fb655e0d3_1440w.jpg\\",\\"https://picx.zhimg.com/v2-ab663e68b6edf4f019ff8c40f893a2b9_1440w.jpg\\",\\"https://picx.zhimg.com/v2-0e5151eff10cc653a7afc6a0a9cd6073_1440w.jpg\\"],\\"dateModified\\":\\"2025-10-13T08:53:02.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.honahec.cc/blog/7xyzj9rf/"}],["meta",{"property":"og:site_name","content":"云朵角落"}],["meta",{"property":"og:title","content":"什么是单点登录SSO？有哪些常用的实现方式？"}],["meta",{"property":"og:description","content":"引言： 每天上班要登录 OA、CRM、财务系统……密码多到记不住？一不小心全设成“123456”又怕被一锅端？别慌！单点登录（SSO） 这把“万能钥匙”能救你于水火，但用不好也可能变成黑客的“黄金通行证”。今天我们就用大白话+图解，拆解 SSO 的奥秘及安全风险！ 1. 什么是单点登录？ 单点登录 (Single Sign-On, SSO) 是一种身份..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic3.zhimg.com/v2-8c4f3f27b3cc2a5ed4e6b7a284d578d2_1440w.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-13T08:53:02.000Z"}],["meta",{"property":"article:tag","content":"转载"}],["meta",{"property":"article:modified_time","content":"2025-10-13T08:53:02.000Z"}]]},"readingTime":{"minutes":7.91,"words":2373},"git":{"createdTime":1760325099000,"updatedTime":1760345582000,"changelog":[{"hash":"c7e09dabbeac88c6e5dba3d72612ddb7e52df039","time":1760345582000,"email":"honahec@gmail.com","author":"honahec","message":"Fix formatting in sso.md"},{"hash":"045833ff3172bfa72cd8cf2e0559c3b75df45c99","time":1760325099000,"email":"honahec@gmail.com","author":"honahec","message":"Adds blog post on Single Sign-On technologies"}]},"autoDesc":true,"filePathRelative":"blog/sso.md","headers":[]}');export{u as comp,S as data};
